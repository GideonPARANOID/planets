precision mediump float;

varying vec2 vTextureCoord;
varying vec3 vTransformedNormal;
varying vec4 vPosition;

uniform float uMaterialShininess;

uniform bool uUseSpecularMap;

uniform vec3 uAmbientColor, 
   uPointLightingLocation,
   uPointLightingSpecularColor,
   uPointLightingDiffuseColor,
   uMaterialEmissiveColor;

uniform sampler2D uSamplerColorMap, 
   uSamplerSpecularMap;

void main(void) {
   vec3 lightWeighting, 
      lightDirection = normalize(uPointLightingLocation - vPosition.xyz),
      normal = normalize(vTransformedNormal);


   float diffuseLightWeighting = max(dot(normal, lightDirection), 0.0), 
      specularLightWeighting = 0.0, 
      shininess = 32.0;
     
   if (uUseSpecularMap) {
      shininess = texture2D(uSamplerSpecularMap, vec2(vTextureCoord.s, vTextureCoord.t)).r * 255.0;
   }

   if (diffuseLightWeighting > 0.0) {
      vec3 eyeDirection = normalize(-vPosition.xyz),
         reflectionDirection = reflect(-lightDirection, normal);

      if (shininess < 200.0) {
         specularLightWeighting =    
            pow(max(dot(reflectionDirection, eyeDirection), 0.0), uMaterialShininess);
      }
   }

   lightWeighting = uAmbientColor
      + uPointLightingSpecularColor * specularLightWeighting
      + uPointLightingDiffuseColor * diffuseLightWeighting;

   vec4 fragmentColor = texture2D(uSamplerColorMap, vec2(vTextureCoord.s, vTextureCoord.t));


   gl_FragColor = 
      vec4(fragmentColor.rgb * lightWeighting + uMaterialEmissiveColor, fragmentColor.a);
}

