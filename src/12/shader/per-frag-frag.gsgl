precision mediump float;

varying vec2 vTextureCoord;
varying vec3 vTransformedNormal;
varying vec4 vPosition;

uniform float uMaterialShininess;

uniform vec3 uAmbientColor, 
   uPointLightingLocation,
   uPointLightingSpecularColor,
   uPointLightingDiffuseColor;

uniform sampler2D uSampler;

void main(void) {
   vec3 lightWeighting, 
      lightDirection = normalize(uPointLightingLocation - vPosition.xyz),
      normal = normalize(vTransformedNormal);
 
   float diffuseLightWeighting = max(dot(normal, lightDirection), 0.0), 
      specularLightWeighting = 0.0;
   
   if (diffuseLightWeighting > 0.0) {
      vec3 eyeDirection = normalize(-vPosition.xyz),
         reflectionDirection = reflect(-lightDirection, normal);

      specularLightWeighting = pow(max(dot(reflectionDirection, eyeDirection), 0.0), uMaterialShininess);
   }

   lightWeighting = uAmbientColor
      + uPointLightingSpecularColor * specularLightWeighting
      + uPointLightingDiffuseColor * diffuseLightWeighting;

   vec4 fragmentColor;
   fragmentColor = texture2D(uSampler, vec2(vTextureCoord.s, vTextureCoord.t));

   gl_FragColor = vec4(fragmentColor.rgb * lightWeighting, fragmentColor.a);
}

